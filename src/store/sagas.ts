import { all, takeEvery, put } from "redux-saga/effects";
import {
  getAllQuestions,
  postNewQuestion,
  deleteQuestionFromApi,
  loadCurrentPage
} from "../services/question.service";
import {
  postNewResult,
  getAllResults,
  deleteResultById
} from "../services/result.service";
import {
  logInUser,
  getUserById,
  registerUser,
  getUserByToken,
  updateUser
} from "../services/auth.service";
import {
  addQuestions,
  addNumQuestions,
  FetchNewQuestion,
  addQuestion,
  DeleteQuestionSaga,
  deleteQuestion,
  FETCH_QUESTIONS,
  FETCH_NEW_QUESTION,
  DELETE_QUESTION_SAGA,
  Paginate,
  PAGINATE
} from "./actions/questions";
import {
  SaveResult,
  saveResultSuccess,
  FetchResults,
  addResults,
  DeleteResult,
  deleteResultSuccess,
  SAVE_RESULT,
  FETCH_RESULTS,
  DELETE_RESULT
} from "./actions/results";
import {
  LogIn,
  logInSuccess,
  logInFailure,
  CheckUser,
  checkUserSuccess,
  checkUserFailure,
  Register,
  registerSuccess,
  registerFailure,
  MeFromToken,
  meFromTokenSuccess,
  meFromTokenFailure,
  LOGIN,
  CHECK_USER,
  REGISTER,
  ME_FROM_TOKEN,
  Update,
  UPDATE,
  updateSuccess,
  updateFailure
} from "./actions/users";
import {
  addCards,
  FETCH_CARDS,
  SaveCard,
  saveCardSuccess,
  SAVE_CARD,
  addCardList,
  SEARCH_FOR_CARD,
  SearchForCard,
  searchForCardSuccess,
  searchForCardFailure,
  UPDATE_CARD,
  updateCardSuccess,
  updateCardFailure,
  deleteCardSuccess,
  DELETE_CARD,
  DeleteCard,
  FetchCardsByUsername,
  FETCH_CARDS_USERNAME
} from "./actions/cards";
import {
  getAllCards,
  postNewCard,
  findCardByWord,
  updateCardService,
  deleteCardById,
  getAllCardsByUsername
} from "../services/card.service";
import { CardItem } from "../models/CardItem";

//QUESTIONS

function* fetchQuestions() {
  const questions = yield getAllQuestions();
  yield put(addQuestions(questions));
}

function* paginate(action: Paginate) {
  const page = action.page;
  const collection = action.collection;
  const result = yield loadCurrentPage(collection, page);
  console.log(result);
  switch (collection) {
    case "questions":
      yield put(addNumQuestions(result));
      break;
    default:
      yield put(addCardList(result));
  }
}

function* fetchNewQuestion(action: FetchNewQuestion) {
  console.log("New question " + action.question);
  const question = action.question;
  yield postNewQuestion(question);
  yield put(addQuestion(question));
}

function* deleteQuestionSaga(action: DeleteQuestionSaga) {
  const questionId = action.questionId;
  yield deleteQuestionFromApi(questionId);
  yield put(deleteQuestion(questionId));
}

//RESULTS

function* saveResult(action: SaveResult) {
  console.log("Post result saga");
  const result = action.result;
  yield postNewResult(result);
  yield put(saveResultSuccess(result));
}

function* fetchResults(action: FetchResults) {
  const results = yield getAllResults();
  yield put(addResults(results));
}

function* deleteResult(action: DeleteResult) {
  const resultId = action.resultId;
  yield deleteResultById(resultId);
  yield put(deleteResultSuccess(resultId));
}

//USERS
function* logIn(action: LogIn) {
  const username = action.username;
  const password = action.password;
  let tmp = false;
  const res = yield logInUser(username, password);
  yield logInUser(username, password).then(res => {
    if (res.msg !== "User Does not exist" && res.msg !== "Invalid credentials") {
      tmp = true;
    }
  });

  if (tmp) {
    yield put(logInSuccess(res));
  } else {
    yield put(logInFailure(res.msg));
  }
}

function* checkUser(action: CheckUser) {
  const id = action.id;
  if (id) {
    const res = yield getUserById(id);
    if (res) {
      yield put(checkUserSuccess(res));
    } else yield put(checkUserFailure("User is not logged"));
  }
}

function* register(action: Register) {
  const user = action.user;
  let tmp = false;
  yield registerUser(user).then(res => {
    if (res.msg !== "User already exists") tmp = true;
  });
  if (tmp) {
    yield put(registerSuccess(user));
  } else {
    yield put(registerFailure("Username is already taken."));
  }
}

function* update(action: Update) {
  const payload = action.payload;
  console.log(payload);
  let tmp = false;
  yield updateUser(payload).then(res => {
    if (res.msg !== "Something went wrong, try again") tmp = true;
  });
  if (tmp) {
    yield put(updateSuccess(payload));
  } else {
    yield put(updateFailure("Something went wrong, try again"));
  }
}

function* meFromToken(action: MeFromToken) {
  const token = action.tokenFromStorage;
  let response = yield getUserByToken(token);
  if (!response.error) {
    //reset token (possibly new token that was regenerated by the server)
    localStorage.setItem("token", response.token);
    yield put(meFromTokenSuccess(response));
  } else {
    localStorage.removeItem("token"); //remove token from storage
    yield put(meFromTokenFailure("Token doesn't exist"));
  }
}

//CARDS
function* saveCard(action: SaveCard) {
  console.log("Post result saga");
  const card = action.card;
  yield postNewCard(card);
  yield put(saveCardSuccess(card));
}

function* fetchCards() {
  const cards = yield getAllCards();
  yield put(addCards(cards));
}

function* fetchCardsByUsername(action: FetchCardsByUsername) {
  const username = action.username;
  console.log(username);
  const cards = yield getAllCardsByUsername(username);
  yield put(addCards(cards));
}

function* searchForCard(action: SearchForCard) {
  const word = action.word;
  let tmp = false;
  let result: CardItem[] = [];
  yield findCardByWord(word).then(res => {
    console.log(res);
    if (res.length !== 0) {
      tmp = true;
      result = res;
    }
  });
  if (tmp) {
    yield put(searchForCardSuccess(result));
  } else {
    yield put(searchForCardFailure("There is not any result for this search"));
  }
}

function* updateCard(action: Update) {
  const payload = action.payload;
  console.log(payload);
  let tmp = false;
  yield updateCardService(payload).then(res => {
    if (res.msg !== "Something went wrong, try again") tmp = true;
  });
  if (tmp) {
    yield put(updateCardSuccess(payload));
  } else {
    yield put(updateCardFailure("Something went wrong, try again"));
  }
}

function* deleteCard(action: DeleteCard) {
  const cardId = action.cardId;
  yield deleteCardById(cardId);
  yield put(deleteCardSuccess(cardId));
}

export function* rootSaga() {
  yield all([
    takeEvery(FETCH_QUESTIONS, fetchQuestions),
    takeEvery(FETCH_NEW_QUESTION, fetchNewQuestion),
    takeEvery(DELETE_QUESTION_SAGA, deleteQuestionSaga),
    takeEvery(SAVE_RESULT, saveResult),
    takeEvery(FETCH_RESULTS, fetchResults),
    takeEvery(DELETE_RESULT, deleteResult),
    takeEvery(LOGIN, logIn),
    takeEvery(CHECK_USER, checkUser),
    takeEvery(REGISTER, register),
    takeEvery(ME_FROM_TOKEN, meFromToken),
    takeEvery(PAGINATE, paginate),
    takeEvery(UPDATE, update),
    takeEvery(FETCH_CARDS, fetchCards),
    takeEvery(SAVE_CARD, saveCard),
    takeEvery(SEARCH_FOR_CARD, searchForCard),
    takeEvery(UPDATE_CARD, updateCard),
    takeEvery(DELETE_CARD, deleteCard),
    takeEvery(FETCH_CARDS_USERNAME, fetchCardsByUsername)
  ]);
}
